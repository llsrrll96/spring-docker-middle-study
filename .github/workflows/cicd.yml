name: Java CICD with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Set YML
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
        find src
       
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew 
        ./gradlew build


    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: mypetlog
        path: build/libs/test-0.0.1-SNAPSHOT.jar

  # 배포 **
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: test
        path: build/libs/

    # EC2에 배포
    # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
    # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
    # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
    ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/test-0.0.1-SNAPSHOT.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/test.jar
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.USERNAME }}/test.jar > app.log 2>&1 &"
        rm -f private_key.pem
